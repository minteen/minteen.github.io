<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这里空荡荡的...</title>
  
  
  <link href="https://minteen.github.io/atom.xml" rel="self"/>
  
  <link href="https://minteen.github.io/"/>
  <updated>2024-02-16T12:37:57.717Z</updated>
  <id>https://minteen.github.io/</id>
  
  <author>
    <name>Minteen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://minteen.github.io/uncategorized/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/4.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://minteen.github.io/uncategorized/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/4.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2024-02-16T12:37:50.469Z</published>
    <updated>2024-02-16T12:37:57.717Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2. python 函数</title>
    <link href="https://minteen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/2.python%E5%87%BD%E6%95%B0/"/>
    <id>https://minteen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/2.python%E5%87%BD%E6%95%B0/</id>
    <published>2024-02-16T12:36:47.969Z</published>
    <updated>2024-02-18T13:03:59.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="默认参数">默认参数</h2><ul><li>必选参数在前，默认参数在后</li><li>只有与默认参数不符的学生才需要提供额外的信息</li><li><font color=#C32E94>默认参数必须指向不变对象</font>：默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_end</span>(<span class="hljs-params">L=[]</span>):<br>    L.append(<span class="hljs-string">&#x27;END&#x27;</span>)<br>    <span class="hljs-keyword">return</span> L<br>add_end()<br>add_end()<br><span class="hljs-comment"># 结果L=[&#x27;END&#x27;, &#x27;END&#x27;]</span><br></code></pre></td></tr></table></figure></li><li>不变对象<code>str</code>、<code>None</code>：不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。## 可变参数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_1</span>(<span class="hljs-params">*numbers</span>):<br><span class="hljs-comment"># 可以传入任意个参数，包括0个参数</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + n * n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_2</span>(<span class="hljs-params">numbers</span>):<br><span class="hljs-comment"># 必须传入tuple或list</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + n * n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br></code></pre></td></tr></table></figure></li><li><code>*</code>：可变参数</li><li>如果想传入list或tuple，可以在其前面加上<code>*</code>号，如<code>calc_2(*li)</code> ## 关键字参数</li><li>传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name, age, **kw</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name:&#x27;</span>, name, <span class="hljs-string">&#x27;age:&#x27;</span>, age, <span class="hljs-string">&#x27;other:&#x27;</span>, kw)<br><br>person(<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-number">45</span>, gender=<span class="hljs-string">&#x27;M&#x27;</span>, job=<span class="hljs-string">&#x27;Engineer&#x27;</span>)<br><br>extra = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;job&#x27;</span>: <span class="hljs-string">&#x27;Engineer&#x27;</span>&#125;<br>person(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">24</span>, **extra)<br></code></pre></td></tr></table></figure></li></ul><h2 id="参数组合">参数组合</h2><h2 id="递归函数">递归函数</h2><ul><li>所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</li><li>递归函数需要注意防止栈溢出，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。</li><li><strong>尾递归</strong>优化：无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把递归函数改成尾递归方式，也会导致栈溢出。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;默认参数&quot;&gt;默认参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必选参数在前，默认参数在后&lt;/li&gt;
&lt;li&gt;只有与默认参数不符的学生才需要提供额外的信息&lt;/li&gt;
&lt;li&gt;&lt;font color=#C32E94&gt;默认参数必须指向不变对象&lt;/font&gt;：默认参数&lt;cod</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://minteen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="python" scheme="https://minteen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python/"/>
    
    <category term="python基础" scheme="https://minteen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python/python%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>1. python基础</title>
    <link href="https://minteen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python-python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/1.python%E5%9F%BA%E7%A1%80/"/>
    <id>https://minteen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python-python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Python/1.python%E5%9F%BA%E7%A1%80/</id>
    <published>2024-02-16T12:34:12.349Z</published>
    <updated>2024-02-18T13:03:25.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python简介">python简介</h2><ul><li>优点</li><li>适合开发：<ul><li>网络应用，包括网站、后台服务等等</li><li>日常需要的小工具，包括系统管理员需要的脚本任务等等</li><li>把其他语言开发的程序再包装起来，方便使用</li></ul></li><li>缺点：<ul><li>运行速度慢，解释型语言在执行时会一行一行地翻译成CPU能理解的机器码，而C程序是运行前直接编译成CPU能执行的机器码</li><li>代码不能加密，C语言不用发布源代码，只需要把编译后的机器码</li></ul></li><li><font color=#C32E94>python解释器</font><ul><li>CPython：官方自带</li><li>IPython：CPython用<code>&gt;&gt;&gt;</code>作为提示符，而IPython用<code>In [序号]:</code>作为提示符。</li><li>PyPy：采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。<ahref="https://doc.pypy.org/en/latest/cpython_differences.html">PyPy与CPython略有差异</a>。</li><li>Jyphon：Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</li><li>IronPython：和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。## 数据类型、变量</li></ul></li><li>十六进制：用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>。</li><li><code>_</code>分割：对于很大的数字（十进制/十六进制），允许使用<code>_</code>进行分割。</li><li>科学计数法：把10用<code>e</code>替代，<spanclass="math inline">\(1.23\times10^9\)</span>就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</li><li>转义字符<code>\</code>：字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></li><li><code>'''...'''</code>的格式表示多行内容</li><li>用<code>r''</code>表示<code>''</code>内部的字符串默认不转义</li><li>动态语言</li><li>常量：用大写表示常量是一种习惯性的用法，没有硬性保障</li><li><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</li><li><code>//</code>，称为地板除，两个整数的除法仍然是整数</li><li><font color=#C32E94>字符串是不可变</font> ## 字符编码</li><li>三种字符编码<ul><li>ASCII编码：1个字节；</li><li>Unicode编码：2个字节。对于在ASCII中存在字符，第一个字节全部填0，第二个字节同ASCII编码；</li><li>UTF-8：将Unicode字符根据不同的数字大小编码成1-6个字节，节省空间。ASCII编码实际上可以被看成是UTF-8编码的一部分。</li></ul></li><li>字符<span class="math inline">\(\Leftrightarrow\)</span>编码<ul><li><code>ord()</code>函数获取单个字符的整数表示</li><li><code>chr()</code>函数把编码转换为对应的单个字符</li><li><code>string.encode('ascii'/utf-8)</code></li><li><code>'\u4e2d\u6587'</code>：使用编码表示字符串</li></ul></li><li>对于Linux系统，需要告诉系统这是一个Python可执行环境，告诉Python解释器文件编码。在Windows系统下可省略<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br></code></pre></td></tr></table></figure> ## 格式化</li><li><code>%</code>占位符：<ul><li>用法：<code>'Hi, %s, you have $%d.' % ('Michael', 1000000)</code>。若只有一个变量，括号可以省略。</li><li><code>%d</code>：整数</li><li><code>%f</code>：浮点数</li><li><code>%s</code>：字符串</li><li><code>%x</code>：十六进制整数用</li><li>转义：<code>%%</code>来表示一个<code>%</code></li></ul></li><li><code>format()</code><ul><li>用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code></li><li>e.g.<code>'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'.format('小明', 17.125)</code></li></ul></li><li>f-string ## list</li><li><code>-1</code>做索引，直接获取最后一个元素；以此类推，可以获取倒数第2个、倒数第3个</li><li>append(element)</li><li>insert(索引:int, element)</li><li>pop()</li><li>pop(索引:int)</li><li>替换：直接赋值 ## tuple</li><li>一旦初始化就不能修改，所以代码更安全</li><li>当只有1个元素时，为了与数学公式小括号区分，必须在添加逗号，如<code>t = (1,)</code></li><li>tuple元素不变，是指tuple中的指针不变！如<code>t = (li:list)</code>，li列表中的元素可以改变 ## 控制语句</li><li><font color=#C32E94>if</font>：只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</li><li><font color=#C32E94>input</font>：返回的数据类型是<code>str</code></li><li>match：类似于C中的<code>switch</code>，但是可以匹配多个值<ul><li><code>case 'A':</code></li><li><code>case x if x &lt; 10:</code></li><li><code>case 11 | 12 | 13 | 14 | 15:</code></li><li><code>case ['gcc', file1, *files]:</code></li><li><code>case _:</code> <code>_</code>表示匹配到其他任何情况 ##dict</li></ul></li><li>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<ul><li><font color=#C32E94>哈希函数</font></li><li>查找和插入的速度极快，不会随着key的增加而变慢（与list相反）</li><li>需要占用大量的内存，内存浪费多（与list相反）</li></ul></li><li>避免key不存在的错误：<ul><li>通过<code>in</code>判断key是否存在</li><li><code>get()</code>方法：如果key不存在，可以返回<code>None</code></li></ul></li><li>pop(key)</li><li>添加：直接添加 ## set</li><li>重复元素在set中自动被过滤</li><li><code>add(key)</code>方法：可以添加元素到set中</li><li><code>remove(key)</code>方法：可以删除元素</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python简介&quot;&gt;python简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;li&gt;适合开发：
&lt;ul&gt;
&lt;li&gt;网络应用，包括网站、后台服务等等&lt;/li&gt;
&lt;li&gt;日常需要的小工具，包括系统管理员需要的脚本任务等等&lt;/li&gt;
&lt;li&gt;把其他语</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://minteen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="python - python基础" scheme="https://minteen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/python-python%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>第二章：图神经网络的数学基础</title>
    <link href="https://minteen.github.io/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.html"/>
    <id>https://minteen.github.io/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.html</id>
    <published>2024-02-16T12:28:01.054Z</published>
    <updated>2024-02-18T12:56:08.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵论基础">矩阵论基础</h2><ul><li>标量和向量<ul><li>转置、内积、正交</li><li>阿达玛乘积(Hadamard Product)：<span class="math inline">\(x\odoty\)</span></li><li>主成分分析（Principal Component Analysis，PCA）</li></ul></li><li>向量范数<ul><li><span class="math inline">\(\parallelx\parallel_1=\sum_{i=1}^n\lvert x_i\rvert\)</span></li><li><span class="math inline">\(\parallelx\parallel_2=\sqrt{\sum_{i=1}^nx_i^2}\)</span>，欧几里得范数</li><li><span class="math inline">\(\parallelx\parallel_\infty=\max\begin{vmatrix}x_i\end{vmatrix}\)</span></li></ul></li><li>向量的夹角与余弦相似度</li><li>矩阵与张量<ul><li>特征值</li><li>平方分解</li><li>特征分解：矩阵的特征分解(Eigen Decomposition)又称谱分解(SpectralDecomposition) ## 图论基础</li></ul></li><li>图的表示</li><li>有向图/无向图</li><li>权值图</li><li>邻接矩阵与关联矩阵</li><li>邻域与度</li><li>二分图（二部图，偶图）</li><li>符号图</li><li>图的遍历</li><li>图的同构与异构<ul><li>图同构(Graph Isomorphism)：图<spanclass="math inline">\(G=(V,E)\)</span>和图<spanclass="math inline">\(G&#39;=(V&#39;,E&#39;)\)</span>是同构的，当且仅当存在一个从<spanclass="math inline">\(G\)</span>到<spanclass="math inline">\(G&#39;\)</span>的映射<spanclass="math inline">\(\sigma\)</span>，使得<spanclass="math inline">\(G\)</span>中任意两个节点<spanclass="math inline">\(u\)</span>和<spanclass="math inline">\(v\)</span>相连接，即<spanclass="math inline">\((u,e)\in E\)</span>，当且仅当<spanclass="math inline">\(G&#39;\)</span>中对应的两个节点<spanclass="math inline">\(\sigma(u)\)</span>和<spanclass="math inline">\(\sigma(v)\)</span>相连接，即<spanclass="math inline">\((\sigma(u),\sigma(v))\inE&#39;\)</span>，同构可记作<span class="math inline">\(G\simeqG&#39;\)</span>。</li><li>异构图：图中的节点类型或关系类型多于一种。</li></ul></li><li>图的途径、迹与路</li><li>图的连通性</li><li><font color=#C32E94>节点的中心性</font><ul><li>度中心性：<spanclass="math inline">\(c_d\left(\nu_i\right)=d\left(\nu_i\right)=\sum_{j=1}^NA_{i,j}\)</span>，归一化<spanclass="math inline">\(DC_{\nu_i}=\frac{d\left(\nu_i\right)}{|V|-1}\)</span></li><li>特征向量中心性</li><li>介数中心度 ## 谱图论基础 ### 拉普拉斯矩阵的来源 ###拉普拉斯矩阵的性质 ### 拉普拉斯矩阵的谱分解 ###拉普拉斯矩阵的归一化</li></ul></li></ul>]]></content>
    
    
    <summary type="html">图神经网络的数学基础，主要为矩阵论和图论的内容。</summary>
    
    
    
    <category term="人工智能" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="图神经网络 - 从深度学习到图神经网络" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>network</title>
    <link href="https://minteen.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/networkx/"/>
    <id>https://minteen.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/networkx/</id>
    <published>2023-07-16T10:55:45.000Z</published>
    <updated>2024-02-18T13:02:37.464Z</updated>
    
    <content type="html"><![CDATA[<!-- <iframe src="https://github.com/minteen/CloudDisk/blob/master/jupyter/networkx.html" width="570" height="3000"></iframe>  --><h2 id="test-for-nbviewerheightnone">test for nbviewer(height=None)</h2><iframe src="https://nbviewer.org/github/minteen/CloudDisk/blob/master/jupyter/networkx.ipynb" width="570" height="3000"></iframe><h2 id="test-for-local-html">test for local html</h2><iframe src="Jupyter/networkx.html" width="570" height="3000"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;iframe src=&quot;https://github.com/minteen/CloudDisk/blob/master/jupyter/networkx.html&quot; width=&quot;570&quot; height=&quot;3000&quot;&gt;&lt;/iframe&gt;  --&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="人工智能" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="图神经网络" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章：图上的深度学习</title>
    <link href="https://minteen.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%9B%BE%E4%B8%8A%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://minteen.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%9B%BE%E4%B8%8A%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-07-16T10:55:45.000Z</published>
    <updated>2024-02-18T12:57:57.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人工智能与深度学习">人工智能与深度学习</h2><h3 id="深度学习的发展">深度学习的发展</h3><ul><li>机器学习中的特征工程：传统机器学习性能的好坏很大程度上取决于特征工程。工程师能成功提取有用特征的前提条件通常是其已经在特定领域摸爬滚打多年，对领域知识有非常深入的理解。</li><li>深度学习中的端到端（End-to-End）概念：整个学习流程并不进行人为的子问题划分，而是完全交给深度学习模型，使其直接学习从原始输入到期望输出的映射。</li></ul><h3 id="人工智能的底层逻辑">人工智能的底层逻辑</h3><ul><li>符号主义、联结主义、行为主义，三者都是研究事物之间的关系。<ul><li>符号主义：用公理和逻辑体系搭建一套人工智能系统。</li><li>联结主义：主张<font color=#C32E94>模仿人类的神经元联结机制</font>来实现人工智能。</li><li>行为主义：智能取决于感知和行动，环境的反馈有助于智能的提升。</li></ul></li><li>深度学习的研究应从以感知智能为主，逐步向基于认知的逻辑推理方向演进。认知图谱=知识图谱+认知推理+逻辑表达</li></ul><h2 id="图神经网络">图神经网络</h2><h3 id="此图非彼图">此图非彼图</h3><ul><li>图像Image：图像是基于点阵的，点阵是一种基于格子(Grid)的数据，其表达依赖于像素(Pixel)</li><li>图Graph：由若干个节点(Node)及连接节点的边(Edge)所构成的，用于表达不同实体间的关系</li><li>图的应用：作为一种高效描述实体间关系的数据结构，很多涉及关系的计算问题，都可以转化为一个面向图的计算问题。比如，在社交网络分析、推荐网络分析、疾病传播探究、基因表达网络分析、细胞相似性分析等领域</li></ul><h3 id="图神经网络的本质">图神经网络的本质</h3><blockquote><p>图神经网络是机器学习的一种特定方式，是神经网络在图数据应用上的一个自然延伸。</p></blockquote><p>所谓机器学习，在形式上，可近似等同于通过统计或推理的方法寻找一个有关特定输入和预期输出的功能函数f，即<span class="math inline">\(Y\approxf(X)\)</span>，图神经网络也是如此。</p><h2 id="图数据处理面临的挑战">图数据处理面临的挑战</h2><ul><li>欧氏空间难表示图<ul><li>传统的深度学习模型非常擅长处理简单而有序的序列数据或栅格数据，如常见的图像、音频、语音和文本等。<ul><li>文本数据和语音数据具有一定的时序性，属于1D栅格数据，这种序列结构与循环神经网络(RecurrentNeuralNetwork,RNN)的“品性”非常契合，因此RNN和LSTM在在具备时序特征的1D栅格数据处理上具有天然优势。</li><li>静态的图像属于2D栅格数据，动态的视频属于3D栅格数据（或者说是具有时序特征的2D栅格数据），它们非常适配于卷积神经网络(ConvolutionalNeural Network,CNN)模型。</li></ul></li><li>图的表示要复杂得多，图之间的相似性也很难在欧氏空间中衡量。因此，人们不得不寻求在非欧氏空间中来定义图。</li></ul></li><li>图表达无固定格式：图中的关系并没有固定的表达方式，这就导致很多完全等价的图同构(GraphIsomorphism)难以被发现。</li><li>图可视化难理解</li><li>图数据不符合独立同分布：独立同分布是机器学习领域很重要的假设。这个假设意味着，如果假设训练数据和测试数据是满足相同分布的，那么通过训练数据获得的模型（比如，拟合一个决策平面）能够在测试集上获得很好的预测效果。</li></ul><h2 id="图神经网络的应用层面">图神经网络的应用层面</h2><p>针对图数据，图神经网络的预测主要体现在三个层面：节点层面(Node-level)、边层面(Edge-level)、图层面(Graph-level)。</p><ul><li>节点预测<ul><li>在节点层面的预测任务主要包括分类任务和回归任务。分类任务和回归任务本质一样，类似于定性和定量的区别。</li><li>“知己知彼”，即（采样）聚合邻居节点的信息，并和自身节点信息进行融合。当邻居信息汇集到本地节点后，就可以利用传统的方法（如深度学习）来做节点的分类或回归</li></ul></li><li>边预测<ul><li>推荐系统</li><li>药物研发：研究药物-靶标相互作用、蛋白质-蛋白质相互作用和药物-药物相互作用</li></ul></li><li>图预测<ul><li>预测整个图的属性，将标签和整个图像关联起来</li></ul></li></ul><h2 id="图神经网络的发展简史">图神经网络的发展简史</h2><h3 id="早期的图神经网络">早期的图神经网络</h3><ul><li>首先将图结构数据“映射”为更简单的表示，如边列表法，邻接列表法。</li><li>再用特定算法加以处理，如搜索算法（BFS，DFS）、最短路径（迪杰斯特拉算法）、生成树算法（Prim）以及聚类算法。</li><li>弊端：<ul><li>可能丢失了图的结构信息，如节点间的拓扑关系</li><li>需要一定置信水平的关于图的先验知识</li></ul></li></ul><h3 id="图卷积神经网络">图卷积神经网络</h3><ul><li>卷积神经网络CNN开始在计算机视觉和图像处理领域“乘风破浪”，取得了很多令人瞩目的成就。CNN的显著特点：局部连接、权值共享、多层处理（通过“卷积”操作，提取多尺度局部空间特征，并将其组合，构建具有高度表达性的表示形式）</li><li>将CNN运用于Graph的理论基础：<ul><li>图天然具备局部连通性质</li><li>与传统的谱图理论(Spectral GraphTheory)相比，权值共享能大幅降低训练成本</li><li>图本身具有层次属性，多层结构能够捕捉不同抽象级别的特征</li></ul></li><li>将CNN运用于Graph的理论障碍<ul><li>经典的CNN模型只适用于文本（1D栅格）、图像（2D栅格）等欧氏空间下的数据，而图通常被认为是非欧氏空间下的数据。</li><li>CNN中的卷积和汇聚，在图数据中难以定义</li></ul></li><li>图卷积神经网络(Graph Convolutional Neural Network,GCN)<ul><li>面向图数据的基于谱域(Spectral-Based)的卷积神经网络</li><li>拉普拉斯矩阵可视为图结构数据的一种表达方式。通过对拉普拉斯算子做特征分解，然后只取低阶的向量，可达到“低通滤波”的效果。</li><li>图卷积运算的一个极简版操作就是取中心节点及其邻居节点的特征平均值</li><li>基于频域的卷积，在计算时，需要在处理整个图数据的同时承担矩阵分解时的极高计算复杂度，当图数据的规模较大时，这种策略难以奏效</li></ul></li></ul><h3 id="图表示学习">图表示学习</h3><ul><li><font color=#C32E94>图表示学习</font>旨在学习通过低维向量表征图的节点、边、子图。在图分析领域中，传统的机器学习方法往往依赖于手工设计的特征，这些方法灵活度较低且计算开销较大。于是<font color=#C32E94>图嵌入表示</font>应运而生。</li><li>图嵌入(GraphEmbedding)：将图中的节点以低维稠密向量的形式进行表达，要求原始图中相似的节点在低维表达空间中也是接近的。得到的低维表达向量可以用来完成下游任务，如节点分类、链接预测或重构原始图等。</li><li>DeepWalk：第一个基于表示学习的图嵌入方法，借鉴Word2Vec算法。简单且易于实现，但它也有一些局限性，比如它无法捕获节点之间的多跳关系。<ol type="1"><li>随机游走（Random Walk）<ul><li>从图中的某个节点开始，随机选择一个邻居节点进行移动。</li><li>重复该过程，每次都从前一个节点的邻居中随机选择一个节点，直到达到预定的路径长度。</li></ul></li><li>生成节点序列<ul><li>对图中的每个节点都执行多次随机游走，以生成大量的节点序列。</li><li>这些序列可以被视为“句子”，其中的节点可以被视为“单词”。</li></ul></li><li>训练节点向量<ul><li>使用节点序列，采用类似于Word2Vec中的Skip-Gram模型来训练节点的向量表示。</li><li>目标是使得图中相邻的节点在向量空间中具有相似的向量表示。</li></ul></li></ol></li><li>Line：</li><li>Node2Vec：采用的是一种有偏(Bias)的随机游走，它可以看作DeepWalk算法的一种扩展，通过DFS（深度优先搜索）和BFS（广度优先搜索）策略，Node2vec方法能更好地发现图的结构（社区）信息，从而获得优于DeepWalk算法的性能。</li></ul><h3 id="图卷积的简化">图卷积的简化</h3><ul><li>谱域图卷积</li><li>GraphSAGE（Graph Sample and Aggregation）<ul><li>通过采样中心节点的邻居，并对这些邻居的特征进行聚合，以此来更新中心节点的嵌入。</li><li>这个过程可以迭代多次，每次迭代都可以考虑更远的邻居</li><li>传统GCN通常需要处理整个图或者至少是一个较大的子图。</li></ul></li></ul><h2 id="图神经网络的计算模块">图神经网络的计算模块</h2><ul><li>传播模块(PropagationModule)。传播模块用于在节点之间传播信息，以便聚合邻居节点的特征信息和拓扑信息。在传播模块中，卷积算子和递归算子通常用于融合来自邻居的信息。在传播模块中，可采用跳跃连接(SkipConnection)结构，跳跃连接也称为“短路连接”，在残差网络(ResNet)中得到广泛应用。跳跃连接能从前向节点中直接抽取历史数据，从而防止信息在传播过程中过度衰减。</li><li>采样模块(SamplingModule)。GNN通常会聚合前一层节点的邻域信息，从而生成当前节点的表征。如果我们的汇聚操作涉及若干GNN层，那么计算牵涉的邻居节点数将会随着深度的增加而呈指数级增长。因此，人们通过采样技术来解决这种“邻居爆炸”的问题。当图比较大时，由于计算负载和存储的限制，也需要用采样模块对图的规模进行缩减。采样模块通常与传播模块配合使用。</li><li>汇聚模块(PoolingModule)。所谓汇聚（亦称池化），可形象地将其理解为“群众代表”，它用局部区间的代表性统计信息（比如最大值、最小值或平均值）来代替整个局部区间，从而减少待处理的数据量。通过层层汇聚，经过<spanclass="math inline">\(K\)</span>轮消息传递，当前节点能够提取更为全局的信息<img src="assets/2024-02-16-19-31-24.png" /></li><li>在每一个隐含层，我们都可以使用卷积/循环算子、采样算子和池化算子，或者添加若干汇聚模块用以减少数据量和提取更为高层的抽象信息。为了获得更好的性能，GNN层通常会堆叠多个隐含层。</li></ul><h2 id="图神经网络的分类">图神经网络的分类</h2><ul><li>按照图类型的不同：<ul><li>有向图</li><li>异构图(Heterogeneous Graphs)</li><li>带边信息的图(Edge-Informative Graph)</li><li>动态图(Dynamic Graphs)</li></ul></li><li>训练过程中采取的局部数据处理方式的不同，主要存在于：<ul><li>邻居节点采样</li><li>感受野(Receptive Field)（（如控制变量法））</li><li>数据增强(Data Augmentation)</li><li>非监督训练方式（如利用不同的Boosting方法）</li></ul></li><li>按照信息传播方式的不同： <imgsrc="assets/2024-02-16-19-37-10.png" /></li></ul><h2 id="展望">展望</h2><p>健壮性强的、有意识的、能决策的新一代人工智能</p><blockquote><p>GNN可视为符号主义和联结主义的交叉融合。它通过图节点之间的消息传递来捕获图的依赖性，这种依赖性可以用来传递因果关系、逻辑推理等（这是符号主义的体现）。汇聚信息之后，对于处理信息的方式，中心节点完全可以用普通的神经网络来进行处理（这是联结主义的体现）。</p></blockquote><p>近年来，网络架构、优化技术和并行计算等技术的发展推动了GNN的研究进程。特别是基于图神经网络的变体，如图卷积网络(GCN)、图注意网络(GAT)、门控图神经网络(GGNN)的提出，让GNN在许多任务上都取得了令人瞩目的成就。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;人工智能与深度学习&quot;&gt;人工智能与深度学习&lt;/h2&gt;
&lt;h3 id=&quot;深度学习的发展&quot;&gt;深度学习的发展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;机器学习中的特征工程：传统机器学习性能的好坏很大程度上取决于特征工程。工程师能成功提取有用特征的前提条件通常是其已经在特定领域摸</summary>
      
    
    
    
    <category term="人工智能" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="图神经网络 - 从深度学习到图神经网络" scheme="https://minteen.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%B0%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://minteen.github.io/Linux/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://minteen.github.io/Linux/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-12T10:08:00.000Z</published>
    <updated>2024-02-16T12:42:36.881Z</updated>
    
    <content type="html"><![CDATA[<p><ahref="https://www.runoob.com/w3cnote/linux-common-command-2.html">参考</a>## ls: list - ls -a 列出目录所有文件，包含以.开始的隐藏文件 - ls -A列出除.及..的其它文件 - ls -r 反序排列 - ls -t 以文件修改时间排序 - ls-S 以文件大小排序 - ls -h 以易读大小显示 - ls -l除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 - ls -lt* 列出当前目录中所有以"t"开头的目录的详细内容 - ls -lhrt按易读方式按时间反序排序，并显示文件详细信息 - ls | sed "s:^:`pwd`:"列出文件绝对路径（不包含隐藏文件） - find <spanclass="math inline">\(pwd -maxdepth 1 | xargs ls -ld列出文件绝对路径（包含隐藏文件）## cd: changeDirectory- cd ~- cd - 进入上一次工作路径- cd !\)</span> 把上个命令的参数作为cd参数使用</p><h2 id="pwd">pwd</h2><ul><li>pwd -P 查看软链接的实际路径 ## mkdir</li></ul><h2 id="rm">rm</h2><ul><li>rm -- -f* 删除以 -f 开头的文件</li></ul><h2 id="rmdir">rmdir</h2><h2 id="mv">mv</h2><ul><li>mv * ../ 移动当前文件夹下的所有文件到上一级目录</li></ul><h2 id="cp">cp</h2><ul><li>-i 提示</li><li>-r 复制目录及目录内所有项目</li><li>-a 复制的文件与原文件时间一样</li></ul><h2 id="cat">cat</h2><ul><li>cat filename 一次显示整个文件</li><li>cat &gt; filename 从键盘创建一个文件</li><li>cat file1 file2 &gt; file 将几个文件合并为一个文件 ## more</li><li>功能类似于 cat, more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按b 键就会往回（back）一页显示。</li></ul><h2 id="less">less</h2><ul><li>less 与 more 类似，但使用 less 可以随意浏览文件，而 more仅能向前移动，却不能向后移动，而且 less在查看之前不会加载整个文件。</li></ul><h2 id="tail">tail</h2><ul><li>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件</li><li>ping 127.0.0.1 &gt; ping.log &amp; tail -f ping.log</li></ul><h2 id="head">head</h2><h2 id="which">which</h2><ul><li>查看可执行文件的位置 ## whereis</li><li>只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）</li><li>whereis -s locate 查找 locate 的源码文件</li><li>whereis -m locate 查找 lcoate 的帮助文件 ## locate</li></ul><h2 id="find">find</h2><h2 id="chmod">chmod</h2><h2 id="tar">tar</h2><h2 id="chown">chown</h2><h2 id="df">df</h2><h2 id="du">du</h2><h2 id="ln">ln</h2><h2 id="date">date</h2><h2 id="cal">cal</h2><h2 id="grep">grep</h2><h2 id="wc">wc</h2><h2 id="ps">ps</h2><h2 id="top">top</h2><h2 id="kill">kill</h2><h2 id="free">free</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a
href=&quot;https://www.runoob.com/w3cnote/linux-common-command-2.html&quot;&gt;参考&lt;/a&gt;
## ls: list - ls -a 列出目录所有文件，包含以.开始的隐藏文件 - ls -A
列出除.及..的其</summary>
      
    
    
    
    <category term="Linux" scheme="https://minteen.github.io/categories/Linux/"/>
    
    
  </entry>
  
</feed>
